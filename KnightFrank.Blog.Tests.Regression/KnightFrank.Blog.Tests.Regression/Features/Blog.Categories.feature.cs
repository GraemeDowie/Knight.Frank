// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace KnightFrank.Blog.Tests.Regression.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Blog categories")]
    public partial class BlogCategoriesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Blog.Categories.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Blog categories", "\tA series of tests to confirm the categories are visible and also that they are s" +
                    "electable and return posts", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
 testRunner.Given("user has visited the blog homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("user should see a list of categories in the top navigation and All Categories sho" +
            "uld have a red background")]
        [NUnit.Framework.TestCaseAttribute("All Categories", null)]
        [NUnit.Framework.TestCaseAttribute("Property", null)]
        [NUnit.Framework.TestCaseAttribute("News", null)]
        [NUnit.Framework.TestCaseAttribute("Lifestyle", null)]
        [NUnit.Framework.TestCaseAttribute("Intelligence", null)]
        public virtual void UserShouldSeeAListOfCategoriesInTheTopNavigationAndAllCategoriesShouldHaveARedBackground(string blogCategories, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("user should see a list of categories in the top navigation and All Categories sho" +
                    "uld have a red background", exampleTags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 9
 testRunner.Then(string.Format("user should see a list of categories in the top navigation {0}", blogCategories), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("user should see the All categories selected with a red background")]
        public virtual void UserShouldSeeTheAllCategoriesSelectedWithARedBackground()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("user should see the All categories selected with a red background", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 20
 testRunner.Then("User should see the All Categories selected with a red background", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("user clicks on the property category then it should have the correct background c" +
            "olor and an active class")]
        public virtual void UserClicksOnThePropertyCategoryThenItShouldHaveTheCorrectBackgroundColorAndAnActiveClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("user clicks on the property category then it should have the correct background c" +
                    "olor and an active class", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 24
 testRunner.When("user selects the Property category", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "propertyBGColor"});
            table1.AddRow(new string[] {
                        "rgba(0, 204, 193, 1)"});
#line 25
 testRunner.Then("the background color should be correct", ((string)(null)), table1, "Then ");
#line 28
  testRunner.And("the class should be active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("user clicks on the News category then it should have the correct background color" +
            " and an active class")]
        public virtual void UserClicksOnTheNewsCategoryThenItShouldHaveTheCorrectBackgroundColorAndAnActiveClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("user clicks on the News category then it should have the correct background color" +
                    " and an active class", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 32
 testRunner.When("user selects the News category", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "newsBGColor"});
            table2.AddRow(new string[] {
                        "rgba(187, 22, 123, 1)"});
#line 33
 testRunner.Then("the News background color should be correct", ((string)(null)), table2, "Then ");
#line 36
  testRunner.And("the News class should be active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("user clicks on the Lifestyle category then it should have the correct background " +
            "color and an active class")]
        public virtual void UserClicksOnTheLifestyleCategoryThenItShouldHaveTheCorrectBackgroundColorAndAnActiveClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("user clicks on the Lifestyle category then it should have the correct background " +
                    "color and an active class", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 40
 testRunner.When("user selects the Lifestyle category", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "lifestyleBGColor"});
            table3.AddRow(new string[] {
                        "rgba(255, 147, 70, 1)"});
#line 41
 testRunner.Then("the Lifestyle background color should be correct", ((string)(null)), table3, "Then ");
#line 44
  testRunner.And("the Lifestyle class should be active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("user clicks on the Intelligence category then it should have the correct backgrou" +
            "nd color and an active class")]
        public virtual void UserClicksOnTheIntelligenceCategoryThenItShouldHaveTheCorrectBackgroundColorAndAnActiveClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("user clicks on the Intelligence category then it should have the correct backgrou" +
                    "nd color and an active class", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 47
 testRunner.When("user selects the Intelligence category", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "intelligenceBGColor"});
            table4.AddRow(new string[] {
                        "rgba(18, 121, 199, 1)"});
#line 48
 testRunner.Then("the Intelligence background color should be correct", ((string)(null)), table4, "Then ");
#line 51
  testRunner.And("the Intelligence class should be active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
