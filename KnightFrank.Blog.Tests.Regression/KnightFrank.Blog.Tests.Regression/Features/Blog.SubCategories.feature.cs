// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace KnightFrank.Blog.Tests.Regression.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Blog Sub-Categories")]
    public partial class BlogSub_CategoriesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Blog.SubCategories.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Blog Sub-Categories", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
 testRunner.Given("user has visited the blog homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User clicks on Property tab then user should see a list of Property Sub Categorie" +
            "s")]
        [NUnit.Framework.TestCaseAttribute("Private View", null)]
        [NUnit.Framework.TestCaseAttribute("Rural", null)]
        [NUnit.Framework.TestCaseAttribute("Residential", null)]
        [NUnit.Framework.TestCaseAttribute("Commercial", null)]
        public virtual void UserClicksOnPropertyTabThenUserShouldSeeAListOfPropertySubCategories(string propSubCat, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User clicks on Property tab then user should see a list of Property Sub Categorie" +
                    "s", exampleTags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 9
 testRunner.When("user clicks on the property category", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
  testRunner.And("clicks on the property sub nav bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.Then(string.Format("user should see a list of property sub categories {0}", propSubCat), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User clicks on News tab then user should see a list of News Sub Categories")]
        [NUnit.Framework.TestCaseAttribute("Residential", null)]
        [NUnit.Framework.TestCaseAttribute("Commercial", null)]
        public virtual void UserClicksOnNewsTabThenUserShouldSeeAListOfNewsSubCategories(string newsSubCat, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User clicks on News tab then user should see a list of News Sub Categories", exampleTags);
#line 22
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 23
 testRunner.When("user clicks on the news category", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
  testRunner.And("clicks on the news sub nav bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.Then(string.Format("user should see a list of news sub categories {0}", newsSubCat), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User clicks on lifestyle tab then user should see a list of lifestyle Sub Categor" +
            "ies")]
        [NUnit.Framework.TestCaseAttribute("Working Life", null)]
        [NUnit.Framework.TestCaseAttribute("Private View", null)]
        [NUnit.Framework.TestCaseAttribute("International View", null)]
        [NUnit.Framework.TestCaseAttribute("Home Life", null)]
        public virtual void UserClicksOnLifestyleTabThenUserShouldSeeAListOfLifestyleSubCategories(string lifestyleSubCat, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User clicks on lifestyle tab then user should see a list of lifestyle Sub Categor" +
                    "ies", exampleTags);
#line 34
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 35
 testRunner.When("user clicks on the lifestyle category", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
  testRunner.And("clicks on the lifestyle sub nav bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.Then(string.Format("user should see a list of lifestyle sub categories {0}", lifestyleSubCat), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User clicks on Intelligence tab then user should see a list of Intelligence Sub C" +
            "ategories")]
        [NUnit.Framework.TestCaseAttribute("Rural", null)]
        [NUnit.Framework.TestCaseAttribute("Global Cities", null)]
        [NUnit.Framework.TestCaseAttribute("Residential", null)]
        [NUnit.Framework.TestCaseAttribute("Global Development Insights", null)]
        [NUnit.Framework.TestCaseAttribute("Commercial", null)]
        [NUnit.Framework.TestCaseAttribute("Luxury", null)]
        [NUnit.Framework.TestCaseAttribute("The Wealth Report", null)]
        public virtual void UserClicksOnIntelligenceTabThenUserShouldSeeAListOfIntelligenceSubCategories(string intelligenceSubCat, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User clicks on Intelligence tab then user should see a list of Intelligence Sub C" +
                    "ategories", exampleTags);
#line 48
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 49
 testRunner.When("user clicks on the intelligence category", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
  testRunner.And("clicks on the intelligence sub nav bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.Then(string.Format("user should see a list of intelligence sub categories {0}", intelligenceSubCat), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
